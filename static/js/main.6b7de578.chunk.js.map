{"version":3,"sources":["components/Header/gijoe_black.jpg","components/Navbar/Navbar.js","components/Header/Header.js","components/Cards/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","className","href","feedback","score","highScore","Header","src","logo","alt","Card","onClick","name","image","App","clicked","id","console","log","cards","a","i","length","j","Math","floor","random","shuffle","state","selections","includes","setState","youWon","push","options","this","map","card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,yC,ogCCwB5BC,MArBf,SAAaC,GACT,OACI,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SACV,uBAAGC,KAAK,eAAR,gBAGJ,wBAAID,UAAU,YAAYD,EAAMG,UAChC,wBAAIF,UAAU,SAAd,UACYD,EAAMI,MADlB,yBAEgBJ,EAAMK,c,wBCAvBC,MAVf,WACI,OAEI,4BAAQL,UAAU,UAClB,yBAAKM,IAAKC,IAAMC,IAAI,Y,YCObC,MAZf,SAAcV,GACV,OACI,yBAAKC,UAAU,QACX,4BAAQA,UAAU,gBAAgBU,QAASX,EAAMW,SAC7C,yBAAKF,IAAKT,EAAMY,KAAML,IAAKP,EAAMa,W,OCmElCC,M,YAjEb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAYRe,QAAU,SAACC,GACTC,QAAQC,IAAIF,GACZ,IAAMG,EA0CV,SAAiBC,GACf,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADL,EAEtB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEG,GAF4B,KAIvC,OAAOH,EA/CSO,CAAQ,EAAKC,MAAMT,OAEjC,GAAI,EAAKU,WAAWC,SAASd,GAS3B,OARA,EAAKe,SAAS,CACZ5B,SAAU,2BACVC,MAAO,EACPe,MAAOA,EACPa,QAAQ,SAGV,EAAKH,WAAa,IAGpB,EAAKA,WAAWI,KAAKjB,GACrB,EAAKe,SAAS,CACZ5B,SAAU,yBACVC,MAAO,EAAKyB,WAAWP,OACvBjB,UAAY,EAAKwB,WAAWP,OAAS,EAAKM,MAAMvB,UAAa,EAAKuB,MAAMvB,UAAY,EAAK,EAAKuB,MAAMvB,UACpGc,MAAOA,EACPa,OAAS,EAAKH,WAAWP,SAAWH,EAAMG,UAhC5C,EAAKM,MAAQ,CACXzB,SAAU,2BACVC,MAAO,EACPC,UAAW,EACXc,MAAOe,EACPF,QAAQ,GAEV,EAAKH,WAAa,GATD,E,sEAuCT,IAAD,OACDV,EAAQgB,KAAKP,MAAMT,MAAMiB,KAAI,SAAAC,GAAI,OACrC,kBAAC,EAAD,CAAMC,IAAKD,EAAKrB,GAAIJ,KAAMyB,EAAKzB,KAAMD,QAAS,WAAQ,EAAKI,QAAQsB,EAAKrB,KAAOH,MAAOwB,EAAKxB,WAK7F,OACE,6BACE,kBAAC,EAAD,CAAKT,MAAO+B,KAAKP,MAAMxB,MAAOC,UAAW8B,KAAKP,MAAMvB,UAAWF,SAAUgC,KAAKP,MAAMzB,WACpF,kBAAC,EAAD,MACA,yBAAKF,UAAU,SAASkB,Q,GApDdoB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b7de578.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gijoe_black.67c81d8f.jpg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar\">\n            <ul>\n                <li className=\"brand\">\n                    <a href=\"/clicky-app\">Clicky Game</a>\n                </li>\n\n                <li className=\"feedback\">{props.feedback}</li>\n                <li className=\"score\">\n                    Score: {props.score} &nbsp;|&nbsp; \n                    Top Score: {props.highScore}\n                    </li>\n            </ul>\n\n        </nav>\n\n\n    );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\nimport logo from \"../Header/gijoe_black.jpg\";\n\nfunction Header() {\n    return (\n        \n        <header className=\"header\">\n        <img src={logo} alt=\"gijoe\"/>\n        </header>\n\n    )\n};\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    return (\n        <div className=\"card\">\n            <button className=\"img-container\" onClick={props.onClick}>\n                <img alt={props.name} src={props.image} />\n            </button>\n        </div>\n\n\n    );\n}\n\nexport default Card;\n\n// Source url: http://www.3djoes.com/the-gi-joe-yearbook-a-visual-index-of-carded-figures.html","import React from 'react';\nimport Nav from \"./components/Navbar/Navbar\";\nimport Header from \"./components/Header/Header\"\nimport './App.css';\nimport Card from './components/Cards/Card';\nimport options from \"./options.json\";\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      feedback: \"Click an image to begin!\",\n      score: 0,\n      highScore: 0,\n      cards: options,\n      youWon: false\n    }\n    this.selections = [\n    ]\n  }\n\n  clicked = (id) => {\n    console.log(id);\n    const cards = shuffle(this.state.cards)\n\n    if (this.selections.includes(id)) {\n      this.setState({\n        feedback: \"You guessed incorrectly!\",\n        score: 0,\n        cards: cards,\n        youWon: false\n\n      })\n      this.selections = []\n      return\n    }\n    this.selections.push(id)\n    this.setState({\n      feedback: \"You guessed correctly!\",\n      score: this.selections.length,\n      highScore: (this.selections.length > this.state.highScore ? (this.state.highScore + 1) : this.state.highScore),\n      cards: cards,\n      youWon: (this.selections.length === cards.length)\n    })\n    \n  }\n\n  render() {\n    const cards = this.state.cards.map(card => (\n      <Card key={card.id} name={card.name} onClick={() => { this.clicked(card.id) }} image={card.image} />\n    ))\n  \n     \n    \n    return (\n      <div>\n        <Nav score={this.state.score} highScore={this.state.highScore} feedback={this.state.feedback} />\n        <Header />\n        <div className=\"cards\">{cards}</div>\n      </div>\n    );\n  }\n\n}\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nexport default App;\n// \n// Add additional functions for winning the Gamepad, different levels adding additional cards?\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}